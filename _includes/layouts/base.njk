<!doctype html>
<html lang="ru">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/img/favicon.ico" type="image/x-icon">
    <title>{{ renderData.title or title or metadata.title }}</title>
    <meta name="Description" content="{{ renderData.description or description or metadata.description }}">
    <link rel="stylesheet" href="{{ '/css/index.css' | url }}">
    <link rel="stylesheet" href="{{ '/css/code.css' | url }}">
    <link rel="alternate" href="{{ metadata.feed.path | url }}" type="application/atom+xml" title="{{ metadata.title }}">
    <!-- Yandex.Metrika counter -->
    <script type="text/javascript" >
       (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
       m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
       (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

       ym(53498344, "init", {
            clickmap:true,
            trackLinks:true,
            accurateTrackBounce:true
       });
    </script>
    <noscript><div><img src="https://mc.yandex.ru/watch/53498344" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
    <!-- /Yandex.Metrika counter -->
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-10904475-2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-10904475-2');
    </script>
    <style>
      .balance-text {
        visibility: hidden;
      }

      @media (scripting: none) {
        .balance-text {
          visibility: visible;
        }
      }

      @supports (text-wrap: balance) {
        .balance-text {
          text-wrap: balance;
          visibility: visible;
        }
      }
    </style>
    <noscript>
      <style>
        .balance-text {
          visibility: visible !important;
        }
      </style>
    </noscript>
  </head>
  <body>
  <div class="layout">
    <header class="main-header">
      <div class="logo">
        <img
            width="50"
            height="50"
            class="logo__img"
            src="/img/logo_small.png" alt="Логотип проекта Defront"
        />
        <div class="logo__sponsor">При поддержке Зарплата.ру</div>
        <div class="logo__title">Defront</div>
        <div class="logo__subtitle">Про фронтенд-разработку и&nbsp;не&nbsp;только</div>
      </div>
      <nav aria-label="основное меню сайта">
        <ul class="nav">
          <li class="nav__item"><a class="link" href="/">Главная</a></li>
          <li class="nav__item"><a class="link" href="/posts/">Архив</a></li>
          <li class="nav__item"><a class="link" href="/acknowledgement/">Благодарности</a></li>
          <li class="nav__item"><a class="link" href="/about/">О проекте</a></li>
        </ul>
      </nav>
    </header>

    <main class="main-content">
      {{ content | safe }}
    </main>

    <footer class="main-footer">
      <nav aria-label="дополнительное меню сайта">
        <p class="footer-item">Зеркало телеграм-канала <a class="link" href="https://t.me/defront">defront</a></p>
        <p class="footer-item">Автор проекта <a class="link" href="http://myshov.com">@myshov</a></p>
        <p class="footer-item">Сделано с помощью <a class="link" href="https://www.11ty.io">11ty</a></p>
      </nav>
    </footer>
  </div>

  <script type="text/javascript">
    (function ()
    {
      // initializes recursive binary search
      function balanceText(element)
      {
        if (textElementIsMultipleLines(element))
        {
          element.style.maxWidth = null;
          var width = element.parentElement.clientWidth;
          var bottomRange = Math.max(100, parseInt(width / 2));
          squeezeContainer(element, element.clientHeight, bottomRange, width);
        }
        // reveal text; paired with the .balance-text class that hides text
        element.classList.replace('balance-text', 'balanced-text');
      }

      // Make the headline element as narrow as possible while maintaining its current height (number of lines). Binary search.
      function squeezeContainer(headline, originalHeight, bottomRange, topRange)
      {
        var mid;
        if ((bottomRange + 4) >= topRange)
        {
          headline.style.maxWidth = Math.ceil(topRange) + 'px';
          return;
        }
        mid = (bottomRange + topRange) / 2;
        headline.style.maxWidth = mid + 'px';

        if (headline.clientHeight > originalHeight)
        {
          // we've squoze too far and headline has spilled onto an additional line; recurse on wider range
          squeezeContainer(headline, originalHeight, mid, topRange);
        }
        else
        {
          // headline has not wrapped to another line; keep squeezing!
          squeezeContainer(headline, originalHeight, bottomRange, mid);
        }
      }

      // check if element text spans multiple lines
      var textElementIsMultipleLines = function (element)
      {
        var elementStyles = window.getComputedStyle(element);
        var elementLineHeight = parseInt(elementStyles['line-height'], 10);
        var elementHeight = parseInt(elementStyles['height'], 10);
        return elementLineHeight < elementHeight;
      }

      function initialize()
      {
        // future-proofing: the browser natively supports text balancing
        if (window.CSS && CSS.supports('text-wrap', 'balance'))
        {
          return;
        }

        var candidates = document.querySelectorAll('.balance-text');

        if (window.ResizeObserver)
        {
          const observer = new ResizeObserver(function(entries)
          {
            entries.forEach(function(entry) {
              var elements = entry.target.querySelectorAll('.balance-text,.balanced-text');
              for (var element of elements)
              {
                balanceText(element);
              }
            });
          });
          for (var element of candidates)
          {
            observer.observe(element.parentElement);
          }
        }
        else
        {
          for (var element of candidates)
          {
            balanceText(element);
          }
        }
      }

      // run now or when document has loaded
      if (['complete', 'interactive'].includes(document.readyState))
      {
        initialize();
      }
      else
      {
        document.addEventListener('readystatechange', initialize);
      }
    })();

    // timer-based fallback if text doesn’t appear after three seconds
    (function ()
    {
      function revealText()
      {
        var texts = document.querySelectorAll('.balance-text');
        if (texts)
        {
          for (var index = 0; index < texts.length; index++)
          {
            var text = texts[index];
            if (text.classList)
            {
              // classList.replace isn’t supported in older browsers
              text.classList.remove('balance-text');
              text.classList.add('balanced-text');
            }
          }
        }
      }

      setTimeout(revealText, 500);
    })();
  </script>

  </body>
</html>
